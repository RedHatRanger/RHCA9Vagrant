# Vagrantfile
Vagrant.configure("2") do |config|
  # Global Box Configuration
  config.vm.box = "generic/rhel9" # Replace with a valid RHEL 9.5 box

  # Hostname-to-IP Mapping for /etc/hosts
  hosts_entries = <<-EOF
192.168.56.10 db.local
192.168.56.11 pah.local
192.168.56.12 controller.local
192.168.56.13 worker.local
EOF

  # Credentials for Red Hat subscription
  REDHAT_USERNAME = "your_username"
  REDHAT_PASSWORD = "your_password"

  # Shared provision script for registering and enabling repos
  provision_script = <<-SCRIPT
    LOGFILE="/var/log/vagrant-provision.log"

    echo "==> Registering system with subscription-manager..." | tee -a $LOGFILE
    subscription-manager register --username #{REDHAT_USERNAME} --password #{REDHAT_PASSWORD} --auto-attach

    echo "==> Enabling required repositories..." | tee -a $LOGFILE
    subscription-manager repos --enable=rhel-9-for-x86_64-baseos-rpms --enable=rhel-9-for-x86_64-appstream-rpms

    echo "==> Updating system and installing core packages..." | tee -a $LOGFILE
    sudo dnf -y update
    sudo dnf -y install python3 python3-pip docker podman git ansible
    sudo systemctl enable --now docker

    echo "==> Setting root password to 'redhat'..." | tee -a $LOGFILE
    echo 'root:redhat' | sudo chpasswd

    echo "==> Creating Ansible user 'rhel' with password 'redhat'..." | tee -a $LOGFILE
    sudo useradd -m -G wheel rhel
    echo 'rhel:redhat' | sudo chpasswd

    echo "==> Updating /etc/hosts with lab entries..." | tee -a $LOGFILE
    echo "#{hosts_entries}" | sudo tee -a /etc/hosts

    # Note: In the real world scenario, you'll want to use a more secure password and DNS setup.
  SCRIPT

  # --------------------------------------------------------------
  # Database Node (PostgreSQL)
  # --------------------------------------------------------------
  config.vm.define "db" do |db|
    db.vm.hostname = "db.local"
    db.vm.network :private_network, ip: "192.168.56.10"

    db.vm.provider "virtualbox" do |vb|
      vb.name = "db"
      vb.cpus = 1
      vb.memory = 2048
    end

    db.vm.provision "shell", inline: provision_script

    db.vm.provision "shell", inline: <<-SCRIPT
      echo "==> Installing PostgreSQL..." | tee -a /var/log/vagrant-provision.log
      sudo dnf -y install postgresql-server
      sudo postgresql-setup --initdb
      sudo systemctl enable --now postgresql

      echo "==> Configuring PostgreSQL for remote access..." | tee -a /var/log/vagrant-provision.log
      sudo sed -i "s/127.0.0.1\/32/all\/0/g" /var/lib/pgsql/data/pg_hba.conf
      echo "listen_addresses = '*'" | sudo tee -a /var/lib/pgsql/data/postgresql.conf
      sudo systemctl restart postgresql

      echo "==> Setting PostgreSQL user password to 'redhat'..." | tee -a /var/log/vagrant-provision.log
      sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'redhat';"
    SCRIPT
  end

  # --------------------------------------------------------------
  # Controller Node (AAP Controller)
  # --------------------------------------------------------------
  config.vm.define "controller" do |controller|
    controller.vm.hostname = "controller.local"
    controller.vm.network :private_network, ip: "192.168.56.12"

    controller.vm.provider "virtualbox" do |vb|
      vb.name = "controller"
      vb.cpus = 2
      vb.memory = 4096
    end

    controller.vm.provision "shell", inline: provision_script

    controller.vm.provision "shell", inline: <<-SCRIPT
      echo "==> Preparing system for Ansible Automation Platform offline installer..." | tee -a /var/log/vagrant-provision.log

      echo "==> Setting up GitLab with Podman on a different IP and ports..." | tee -a /var/log/vagrant-provision.log
      podman pull gitlab/gitlab-ce:latest

      podman run -d \
        --hostname gitlab.local \
        --name gitlab \
        -p 8080:80 -p 8443:443 -p 2223:22 \
        --restart=always \
        -v /srv/gitlab/config:/etc/gitlab \
        -v /srv/gitlab/logs:/var/log/gitlab \
        -v /srv/gitlab/data:/var/opt/gitlab \
        gitlab/gitlab-ce:latest

      echo "==> GitLab is up and running. Access it at http://192.168.56.12:8080" | tee -a /var/log/vagrant-provision.log
    SCRIPT
  end

  # --------------------------------------------------------------
  # Private Automation Hub Node (PAH)
  # --------------------------------------------------------------
  config.vm.define "pah" do |pah|
    pah.vm.hostname = "pah.local"
    pah.vm.network :private_network, ip: "192.168.56.11"

    pah.vm.provider "virtualbox" do |vb|
      vb.name = "pah"
      vb.cpus = 2
      vb.memory = 2048
    end

    pah.vm.provision "shell", inline: provision_script
  end

  # --------------------------------------------------------------
  # Worker Node (Playbook Target)
  # --------------------------------------------------------------
  config.vm.define "worker" do |worker|
    worker.vm.hostname = "worker.local"
    worker.vm.network :private_network, ip: "192.168.56.13"

    worker.vm.provider "virtualbox" do |vb|
      vb.name = "worker"
      vb.cpus = 1
      vb.memory = 2048
    end

    worker.vm.provision "shell", inline: provision_script
  end
end
