# Vagrantfile for a minimal, lab/testing setup of AAP 2.4 (offline bundle)
#
# Hostnames and IP addresses (with /24 CIDR):
# - controller.example.com  → 172.28.128.100 (Automation Controller)
# - node1.example.com       → 172.28.128.101 (Managed Host)
# - db.example.com          → 172.28.128.102 (PostgreSQL DB)
# - hub.example.com         → 172.28.128.103 (Automation Hub)
#
# Box Reference: "generic/rhel9" — a widely used base box for RHEL 9.
#
# Note: Resource allocations below are the minimum for learning purposes.
# The passwords "redhat" are used for exam practice only. In production, use more secure passwords.
# Since DNS is not available, we update /etc/hosts on each VM with static entries.
#
# This Vagrantfile also demonstrates subscription-manager registration using environment variables RHSM_USER and RHSM_PASS.
# If you wish to register the VMs automatically, run:
# (on Linux/macOS):
#   export RHSM_USER="<rhn_username>"
#   export RHSM_PASS="<rhn_password>"
# (on Windows PowerShell):
#   $env:RHSM_USER = "<rhn_username>"
#   $env:RHSM_PASS = "<rhn_password>"
# Set the environment variables before vagrant up. If not set, it prints a warning and skips subscription registration.
# Run 'Yum update -y' and reboot to update all the VMs to RHEL 9.5

Vagrant.configure("2") do |config|
  ##############################################################################
  # 1) Specify the RHEL 9 Base Box
  ##############################################################################
  config.vm.box = "generic/rhel9"

  # Warn user if environment variables are not set
  if ENV['RHSM_USER'].nil? || ENV['RHSM_PASS'].nil?
    puts "WARNING: Please set RHSM_USER and RHSM_PASS environment variables before running vagrant up!"
  end

  # ---------------------------------------------------------------------------
  # Subscription-Manager Provisioning Script
  # ---------------------------------------------------------------------------
  subscription_manager_provision = <<-SHELL
    if [ -z "$RHSM_USER" ] || [ -z "$RHSM_PASS" ]; then
      echo "RHSM_USER / RHSM_PASS not set. Skipping subscription-manager register."
      exit 0
    fi

    echo "Registering this VM via subscription-manager..."
    sudo subscription-manager register --username "$RHSM_USER" --password "$RHSM_PASS" --auto-attach

    # If needed, enable specific repositories:
    # sudo subscription-manager repos --enable rhel-9-for-x86_64-baseos-rpms
    # sudo subscription-manager repos --enable rhel-9-for-x86_64-appstream-rpms
  SHELL

  # ---------------------------------------------------------------------------
  # Create 'rhel' user if missing
  # ---------------------------------------------------------------------------
  create_rhel_user = <<-SHELL
    echo "Ensuring 'rhel' user exists..."
    if ! id -u rhel &>/dev/null; then
      sudo useradd -m -s /bin/bash rhel
    fi
  SHELL

  # ---------------------------------------------------------------------------
  # Common /etc/hosts Entries for All VMs
  # ---------------------------------------------------------------------------
  hosts_entries = <<-EOS
172.28.128.100  controller.example.com  controller
172.28.128.101  node1.example.com  node1
172.28.128.102  db.example.com  node1
172.28.128.103  hub.example.com  hub  pah
EOS

  # ---------------------------------------------------------------------------
  # Common Provisioning (Set Passwords, Update /etc/hosts)
  # ---------------------------------------------------------------------------
  common_provision = <<-SHELL
    echo 'rhel:redhat' | sudo chpasswd
    echo 'root:redhat' | sudo chpasswd

    cat <<HOSTS | sudo tee -a /etc/hosts
#{hosts_entries}
HOSTS
  SHELL

  # ---------------------------------------------------------------------------
  # Wheel Group Passwordless Sudo for 'rhel'
  # ---------------------------------------------------------------------------
  wheel_sudo_provision = <<-SHELL
    echo "Adding 'rhel' user to the 'wheel' group..."
    sudo usermod -aG wheel rhel

    echo "Configuring passwordless sudo for the 'wheel' group..."
    echo '%wheel ALL=(ALL) NOPASSWD: ALL' | sudo tee /etc/sudoers.d/wheel-nopasswd
    sudo chmod 440 /etc/sudoers.d/wheel-nopasswd
  SHELL

  ##############################################################################
  # 2) Automation Controller
  ##############################################################################
  config.vm.define "controller" do |controller|
    controller.vm.hostname = "controller.example.com"
    controller.vm.network "private_network", ip: "172.28.128.100", netmask: "255.255.255.0"

    controller.vm.provider "virtualbox" do |vb|
      vb.memory = 4096
      vb.cpus   = 2
    end

    # Create rhel user if missing
    controller.vm.provision "shell", inline: create_rhel_user

    # Basic provisioning
    controller.vm.provision "shell", inline: common_provision

    # Subscription-manager provisioning
    controller.vm.provision "shell", inline: subscription_manager_provision, env: {
      "RHSM_USER" => ENV['RHSM_USER'],
      "RHSM_PASS" => ENV['RHSM_PASS']
    }

    # Wheel group passwordless sudo for 'rhel'
    controller.vm.provision "shell", inline: wheel_sudo_provision
  end

  ##############################################################################
  # 3) Managed Host (node1)
  ##############################################################################
  config.vm.define "node1" do |node1|
    node1.vm.hostname = "node1.example.com"
    node1.vm.network "private_network", ip: "172.28.128.101", netmask: "255.255.255.0"

    node1.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus   = 1
    end

    # Create rhel user if missing
    node1.vm.provision "shell", inline: create_rhel_user

    # Basic provisioning: sets passwords, /etc/hosts
    node1.vm.provision "shell", inline: common_provision

    # Subscription-manager (optional)
    node1.vm.provision "shell", inline: subscription_manager_provision, env: {
      "RHSM_USER" => ENV['RHSM_USER'],
      "RHSM_PASS" => ENV['RHSM_PASS']
    }

    # Install Podman, pull a container image, and run it
    node1.vm.provision "shell", inline: <<-SHELL
      echo "Installing Podman..."
      sudo dnf install -y podman

      echo "Pulling GitHub container image..."
      # Replace with any actual GitHub or other container image you prefer
      # For demonstration, let's assume you have 'docker.io/library/httpd:latest'
      sudo podman pull docker.io/library/httpd:latest

      echo "Running container on port 8080..."
      # Expose container port 80 -> host port 8080
      sudo podman run -d --name my-github-container -p 8080:80 docker.io/library/httpd:latest

      echo "Container is running. Access it via http://node1.example.com:8080 (or 172.28.128.101:8080)"
    SHELL

    # Wheel group passwordless sudo for 'rhel'
    node1.vm.provision "shell", inline: wheel_sudo_provision
  end

  ##############################################################################
  # 4) PostgreSQL DB
  ##############################################################################
  config.vm.define "db" do |db|
    db.vm.hostname = "db.example.com"
    db.vm.network "private_network", ip: "172.28.128.102", netmask: "255.255.255.0"

    db.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus   = 1
    end

    # Create rhel user if missing
    db.vm.provision "shell", inline: create_rhel_user

    db.vm.provision "shell", inline: common_provision
    db.vm.provision "shell", inline: subscription_manager_provision, env: {
      "RHSM_USER" => ENV['RHSM_USER'],
      "RHSM_PASS" => ENV['RHSM_PASS']
    }

    # Wheel group passwordless sudo for 'rhel'
    db.vm.provision "shell", inline: wheel_sudo_provision
  end

  ##############################################################################
  # 5) Automation Hub
  ##############################################################################
  config.vm.define "hub" do |hub|
    hub.vm.hostname = "hub.example.com"
    hub.vm.network "private_network", ip: "172.28.128.103", netmask: "255.255.255.0"

    hub.vm.provider "virtualbox" do |vb|
      vb.memory = 2048
      vb.cpus   = 1
    end

    # Create rhel user if missing
    hub.vm.provision "shell", inline: create_rhel_user

    hub.vm.provision "shell", inline: common_provision
    hub.vm.provision "shell", inline: subscription_manager_provision, env: {
      "RHSM_USER" => ENV['RHSM_USER'],
      "RHSM_PASS" => ENV['RHSM_PASS']
    }

    # Wheel group passwordless sudo for 'rhel'
    hub.vm.provision "shell", inline: wheel_sudo_provision
  end
end
