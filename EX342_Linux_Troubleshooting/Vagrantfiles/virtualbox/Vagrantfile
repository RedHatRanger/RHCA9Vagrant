# Vagrantfile to create the required VMs for the exam lab environment

$hostsfile = <<-SCRIPT
# Create the hosts file for all nodes because we do not have DNS setup:
echo "172.25.250.254   bastion.example.com   bastion" >> /etc/hosts
echo "172.25.250.9     workstation.example.com   workstation" >> /etc/hosts
echo "172.25.250.10    node1.example.com   node1" >> /etc/hosts
echo "172.25.250.11    node2.example.com   node2" >> /etc/hosts
echo "172.25.250.17    utility.example.com   utility" >> /etc/hosts
echo "172.25.254.254   content.example.com   content" >> /etc/hosts
SCRIPT

$user_setup = <<-SCRIPT
# Create the user 'bob' and assign the password 'redhat':
useradd bob
echo "bob:redhat" | chpasswd
usermod -aG wheel bob
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/ansibleuser_bob

# Enable PasswordAuthentication and disable root login:
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
systemctl restart sshd
SCRIPT

Vagrant.configure("2") do |config|
  # Default configuration for all VMs
  config.vm.box = "generic/rhel9"
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.cpus = 1
  end

  # Bastion VM
  config.vm.define "bastion" do |bastion|
    bastion.vm.hostname = "bastion.example.com"
    bastion.vm.network "private_network", ip: "172.25.250.254"
    bastion.vm.provision "shell", inline: $hostsfile
    bastion.vm.provision "shell", inline: $user_setup
  end

  # Workstation VM
  config.vm.define "workstation" do |workstation|
    workstation.vm.hostname = "workstation.example.com"
    workstation.vm.network "private_network", ip: "172.25.250.9"
    workstation.vm.provider "virtualbox" do |vb|
      vb.gui = true  # Enable GUI for the workstation VM
      vb.memory = "2048"
    end
    workstation.vm.provision "shell", inline: $hostsfile
    workstation.vm.provision "shell", inline: $user_setup
  end

  # Server A VM
  config.vm.define "node1" do |node1|
    node1.vm.hostname = "node1.example.com"
    node1.vm.network "private_network", ip: "172.25.250.10"
    node1.vm.provision "shell", inline: $hostsfile
    node1.vm.provision "shell", inline: $user_setup
  end

  # Server B VM
  config.vm.define "node2" do |node2|
    node2.vm.hostname = "node2.example.com"
    node2.vm.network "private_network", ip: "172.25.250.11"
    node2.vm.provision "shell", inline: $hostsfile
    node2.vm.provision "shell", inline: $user_setup
  end

  # Utility VM
  config.vm.define "utility" do |utility|
    utility.vm.hostname = "utility.example.com"
    utility.vm.network "private_network", ip: "172.25.250.17"
    utility.vm.provision "shell", inline: $hostsfile
    utility.vm.provision "shell", inline: $user_setup
  end

  # Content VM (optional, since it provides content and materials)
  config.vm.define "content" do |content|
    content.vm.hostname = "content.example.com"
    content.vm.network "private_network", ip: "172.25.254.254"
    content.vm.provision "shell", inline: $hostsfile
    content.vm.provision "shell", inline: $user_setup
  end
end
